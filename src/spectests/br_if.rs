// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/br_if.wast
use std::panic;
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use wabt::wat2wasm;


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32 i32 i32) (result i32)))
      (type (;1;) (func))
      (type (;2;) (func (result i32)))
      (type (;3;) (func (result i64)))
      (type (;4;) (func (result f32)))
      (type (;5;) (func (result f64)))
      (type (;6;) (func (param i32) (result i32)))
      (type (;7;) (func (param i32)))
      (type (;8;) (func (param i32 i32)))
      (func (;0;) (type 1))
      (func (;1;) (type 1)
        block  ;; label = @1
          i32.const 0
          i32.const 1
          br_if 0 (;@1;)
          i32.ctz
          drop
        end)
      (func (;2;) (type 1)
        block  ;; label = @1
          i64.const 0
          i32.const 1
          br_if 0 (;@1;)
          i64.ctz
          drop
        end)
      (func (;3;) (type 1)
        block  ;; label = @1
          f32.const 0x0p+0 (;=0;)
          i32.const 1
          br_if 0 (;@1;)
          f32.neg
          drop
        end)
      (func (;4;) (type 1)
        block  ;; label = @1
          f64.const 0x0p+0 (;=0;)
          i32.const 1
          br_if 0 (;@1;)
          f64.neg
          drop
        end)
      (func (;5;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          i32.ctz
        end)
      (func (;6;) (type 3) (result i64)
        block (result i64)  ;; label = @1
          i64.const 2
          i32.const 1
          br_if 0 (;@1;)
          i64.ctz
        end)
      (func (;7;) (type 4) (result f32)
        block (result f32)  ;; label = @1
          f32.const 0x1.8p+1 (;=3;)
          i32.const 1
          br_if 0 (;@1;)
          f32.neg
        end)
      (func (;8;) (type 5) (result f64)
        block (result f64)  ;; label = @1
          f64.const 0x1p+2 (;=4;)
          i32.const 1
          br_if 0 (;@1;)
          f64.neg
        end)
      (func (;9;) (type 6) (param i32) (result i32)
        block  ;; label = @1
          get_local 0
          br_if 0 (;@1;)
          i32.const 2
          return
        end
        i32.const 3)
      (func (;10;) (type 6) (param i32) (result i32)
        block  ;; label = @1
          call 0
          get_local 0
          br_if 0 (;@1;)
          i32.const 2
          return
        end
        i32.const 3)
      (func (;11;) (type 7) (param i32)
        block  ;; label = @1
          call 0
          call 0
          get_local 0
          br_if 0 (;@1;)
        end)
      (func (;12;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 10
          get_local 0
          br_if 0 (;@1;)
          drop
          i32.const 11
          return
        end)
      (func (;13;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          call 0
          i32.const 20
          get_local 0
          br_if 0 (;@1;)
          drop
          i32.const 21
          return
        end)
      (func (;14;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          call 0
          call 0
          i32.const 11
          get_local 0
          br_if 0 (;@1;)
        end)
      (func (;15;) (type 6) (param i32) (result i32)
        block  ;; label = @1
          loop  ;; label = @2
            get_local 0
            br_if 1 (;@1;)
            i32.const 2
            return
          end
        end
        i32.const 3)
      (func (;16;) (type 6) (param i32) (result i32)
        block  ;; label = @1
          loop  ;; label = @2
            call 0
            get_local 0
            br_if 1 (;@1;)
            i32.const 2
            return
          end
        end
        i32.const 4)
      (func (;17;) (type 7) (param i32)
        loop  ;; label = @1
          call 0
          get_local 0
          br_if 1 (;@0;)
        end)
      (func (;18;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          br_if 0 (;@1;)
          br 0 (;@1;)
        end)
      (func (;19;) (type 1)
        block  ;; label = @1
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          br_if 0 (;@1;)
        end)
      (func (;20;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          br_if 0 (;@1;)
          i32.const 3
          br_if 0 (;@1;)
          drop
          i32.const 4
        end)
      (func (;21;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          i32.const 1
          get_local 0
          br_if 0 (;@1;)
          br_if 0 (;@1;)
          drop
          i32.const 4
        end)
      (func (;22;) (type 1)
        block  ;; label = @1
          i32.const 1
          i32.const 2
          br_if 0 (;@1;)
          br_table 0 (;@1;) 0 (;@1;) 0 (;@1;)
        end)
      (func (;23;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          br_if 0 (;@1;)
          i32.const 3
          br_table 0 (;@1;) 0 (;@1;) 0 (;@1;)
          i32.const 4
        end)
      (func (;24;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          i32.const 1
          i32.const 3
          br_if 0 (;@1;)
          br_table 0 (;@1;) 0 (;@1;)
          i32.const 4
        end)
      (func (;25;) (type 3) (result i64)
        block (result i64)  ;; label = @1
          i64.const 1
          i32.const 2
          br_if 0 (;@1;)
          return
        end)
      (func (;26;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          get_local 0
          br_if 0 (;@1;)
          if (result i32)  ;; label = @2
            i32.const 2
          else
            i32.const 3
          end
        end)
      (func (;27;) (type 8) (param i32 i32)
        block  ;; label = @1
          get_local 0
          if  ;; label = @2
            get_local 1
            br_if 1 (;@1;)
          else
            call 0
          end
        end)
      (func (;28;) (type 8) (param i32 i32)
        block  ;; label = @1
          get_local 0
          if  ;; label = @2
            call 0
          else
            get_local 1
            br_if 1 (;@1;)
          end
        end)
      (func (;29;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 3
          i32.const 10
          br_if 0 (;@1;)
          i32.const 2
          get_local 0
          select
        end)
      (func (;30;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 3
          i32.const 10
          br_if 0 (;@1;)
          get_local 0
          select
        end)
      (func (;31;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          i32.const 3
          i32.const 10
          br_if 0 (;@1;)
          select
        end)
      (func (;32;) (type 0) (param i32 i32 i32) (result i32)
        i32.const -1)
      (func (;33;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 12
          i32.const 1
          br_if 0 (;@1;)
          i32.const 2
          i32.const 3
          call 32
        end)
      (func (;34;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 13
          i32.const 1
          br_if 0 (;@1;)
          i32.const 3
          call 32
        end)
      (func (;35;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          i32.const 14
          i32.const 1
          br_if 0 (;@1;)
          call 32
        end)
      (func (;36;) (type 0) (param i32 i32 i32) (result i32)
        get_local 0)
      (func (;37;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 4
          i32.const 10
          br_if 0 (;@1;)
          i32.const 1
          i32.const 2
          i32.const 0
          call_indirect (type 0)
        end)
      (func (;38;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 4
          i32.const 10
          br_if 0 (;@1;)
          i32.const 2
          i32.const 0
          call_indirect (type 0)
        end)
      (func (;39;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          i32.const 4
          i32.const 10
          br_if 0 (;@1;)
          i32.const 0
          call_indirect (type 0)
        end)
      (func (;40;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          i32.const 3
          i32.const 4
          i32.const 10
          br_if 0 (;@1;)
          call_indirect (type 0)
        end)
      (func (;41;) (type 6) (param i32) (result i32)
        (local i32)
        block (result i32)  ;; label = @1
          i32.const 17
          get_local 0
          br_if 0 (;@1;)
          set_local 0
          i32.const -1
        end)
      (func (;42;) (type 5) (result f64)
        block (result f64)  ;; label = @1
          f64.const 0x1p+0 (;=1;)
          i32.const 1
          br_if 0 (;@1;)
          f64.neg
        end)
      (func (;43;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          i32.const 10
          i32.add
        end)
      (func (;44;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 10
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          i32.sub
        end)
      (func (;45;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          memory.grow
        end)
      (func (;46;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          i32.const 4
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 16
          end
          i32.add
        end
        i32.add)
      (func (;47;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 4
          end
          br 0 (;@1;)
          i32.const 16
        end
        i32.add)
      (func (;48;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 4
          end
          i32.const 1
          br_if 0 (;@1;)
          drop
          i32.const 16
        end
        i32.add)
      (func (;49;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          i32.const 4
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 1
          end
          br_if 0 (;@1;)
          drop
          i32.const 16
        end
        i32.add)
      (func (;50;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 4
          end
          i32.const 1
          br_table 0 (;@1;)
          i32.const 16
        end
        i32.add)
      (func (;51;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          i32.const 4
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 1
          end
          br_table 0 (;@1;)
          i32.const 16
        end
        i32.add)
      (table (;0;) 1 1 anyfunc)
      (memory (;0;) 0)
      (export \"type-i32\" (func 1))
      (export \"type-i64\" (func 2))
      (export \"type-f32\" (func 3))
      (export \"type-f64\" (func 4))
      (export \"type-i32-value\" (func 5))
      (export \"type-i64-value\" (func 6))
      (export \"type-f32-value\" (func 7))
      (export \"type-f64-value\" (func 8))
      (export \"as-block-first\" (func 9))
      (export \"as-block-mid\" (func 10))
      (export \"as-block-last\" (func 11))
      (export \"as-block-first-value\" (func 12))
      (export \"as-block-mid-value\" (func 13))
      (export \"as-block-last-value\" (func 14))
      (export \"as-loop-first\" (func 15))
      (export \"as-loop-mid\" (func 16))
      (export \"as-loop-last\" (func 17))
      (export \"as-br-value\" (func 18))
      (export \"as-br_if-cond\" (func 19))
      (export \"as-br_if-value\" (func 20))
      (export \"as-br_if-value-cond\" (func 21))
      (export \"as-br_table-index\" (func 22))
      (export \"as-br_table-value\" (func 23))
      (export \"as-br_table-value-index\" (func 24))
      (export \"as-return-value\" (func 25))
      (export \"as-if-cond\" (func 26))
      (export \"as-if-then\" (func 27))
      (export \"as-if-else\" (func 28))
      (export \"as-select-first\" (func 29))
      (export \"as-select-second\" (func 30))
      (export \"as-select-cond\" (func 31))
      (export \"as-call-first\" (func 33))
      (export \"as-call-mid\" (func 34))
      (export \"as-call-last\" (func 35))
      (export \"as-call_indirect-func\" (func 37))
      (export \"as-call_indirect-first\" (func 38))
      (export \"as-call_indirect-mid\" (func 39))
      (export \"as-call_indirect-last\" (func 40))
      (export \"as-set_local-value\" (func 41))
      (export \"as-unary-operand\" (func 42))
      (export \"as-binary-left\" (func 43))
      (export \"as-binary-right\" (func 44))
      (export \"as-memory.grow-size\" (func 45))
      (export \"nested-block-value\" (func 46))
      (export \"nested-br-value\" (func 47))
      (export \"nested-br_if-value\" (func 48))
      (export \"nested-br_if-value-cond\" (func 49))
      (export \"nested-br_table-value\" (func 50))
      (export \"nested-br_table-value-index\" (func 51))
      (elem (i32.const 0) 36))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, ImportObject::new()).expect("WASM can't be instantiated")
}

// Line 321
#[test]
fn br_if_l321_assert_return_invoke_type_i32() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("type-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 322
#[test]
fn br_if_l322_assert_return_invoke_type_i64() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("type-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 323
#[test]
fn br_if_l323_assert_return_invoke_type_f32() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("type-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 324
#[test]
fn br_if_l324_assert_return_invoke_type_f64() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("type-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 326
#[test]
fn br_if_l326_assert_return_invoke_type_i32_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("type-i32-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 327
#[test]
fn br_if_l327_assert_return_invoke_type_i64_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("type-i64-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i64 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 2 as i64);
    }).expect("Error while invoking");
}

// Line 328
#[test]
fn br_if_l328_assert_return_invoke_type_f32_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("type-f32-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 3.0 as f32);
    }).expect("Error while invoking");
}

// Line 329
#[test]
fn br_if_l329_assert_return_invoke_type_f64_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("type-f64-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f64 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 4.0 as f64);
    }).expect("Error while invoking");
}

// Line 331
#[test]
fn br_if_l331_assert_return_invoke_as_block_first() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 332
#[test]
fn br_if_l332_assert_return_invoke_as_block_first() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 333
#[test]
fn br_if_l333_assert_return_invoke_as_block_mid() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 334
#[test]
fn br_if_l334_assert_return_invoke_as_block_mid() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 335
#[test]
fn br_if_l335_assert_return_invoke_as_block_last() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 336
#[test]
fn br_if_l336_assert_return_invoke_as_block_last() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 338
#[test]
fn br_if_l338_assert_return_invoke_as_block_first_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-first-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 11 as i32);
    }).expect("Error while invoking");
}

// Line 339
#[test]
fn br_if_l339_assert_return_invoke_as_block_first_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-first-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 10 as i32);
    }).expect("Error while invoking");
}

// Line 340
#[test]
fn br_if_l340_assert_return_invoke_as_block_mid_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-mid-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 21 as i32);
    }).expect("Error while invoking");
}

// Line 341
#[test]
fn br_if_l341_assert_return_invoke_as_block_mid_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-mid-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 20 as i32);
    }).expect("Error while invoking");
}

// Line 342
#[test]
fn br_if_l342_assert_return_invoke_as_block_last_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-last-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 11 as i32);
    }).expect("Error while invoking");
}

// Line 343
#[test]
fn br_if_l343_assert_return_invoke_as_block_last_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-block-last-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 11 as i32);
    }).expect("Error while invoking");
}

// Line 345
#[test]
fn br_if_l345_assert_return_invoke_as_loop_first() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-loop-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 346
#[test]
fn br_if_l346_assert_return_invoke_as_loop_first() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-loop-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 347
#[test]
fn br_if_l347_assert_return_invoke_as_loop_mid() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-loop-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 348
#[test]
fn br_if_l348_assert_return_invoke_as_loop_mid() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-loop-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 4 as i32);
    }).expect("Error while invoking");
}

// Line 349
#[test]
fn br_if_l349_assert_return_invoke_as_loop_last() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-loop-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 350
#[test]
fn br_if_l350_assert_return_invoke_as_loop_last() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-loop-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 352
#[test]
fn br_if_l352_assert_return_invoke_as_br_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 354
#[test]
fn br_if_l354_assert_return_invoke_as_br_if_cond() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-br_if-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 355
#[test]
fn br_if_l355_assert_return_invoke_as_br_if_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-br_if-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 356
#[test]
fn br_if_l356_assert_return_invoke_as_br_if_value_cond() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-br_if-value-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 357
#[test]
fn br_if_l357_assert_return_invoke_as_br_if_value_cond() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-br_if-value-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 359
#[test]
fn br_if_l359_assert_return_invoke_as_br_table_index() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-br_table-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 360
#[test]
fn br_if_l360_assert_return_invoke_as_br_table_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-br_table-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 361
#[test]
fn br_if_l361_assert_return_invoke_as_br_table_value_index() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-br_table-value-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 363
#[test]
fn br_if_l363_assert_return_invoke_as_return_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-return-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i64 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1 as i64);
    }).expect("Error while invoking");
}

// Line 365
#[test]
fn br_if_l365_assert_return_invoke_as_if_cond() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 366
#[test]
fn br_if_l366_assert_return_invoke_as_if_cond() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 367
#[test]
fn br_if_l367_assert_return_invoke_as_if_then() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-then") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 368
#[test]
fn br_if_l368_assert_return_invoke_as_if_then() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-then") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(4 as i32, 0 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 369
#[test]
fn br_if_l369_assert_return_invoke_as_if_then() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-then") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 370
#[test]
fn br_if_l370_assert_return_invoke_as_if_then() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-then") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(4 as i32, 1 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 371
#[test]
fn br_if_l371_assert_return_invoke_as_if_else() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-else") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 372
#[test]
fn br_if_l372_assert_return_invoke_as_if_else() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-else") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(3 as i32, 0 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 373
#[test]
fn br_if_l373_assert_return_invoke_as_if_else() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-else") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 374
#[test]
fn br_if_l374_assert_return_invoke_as_if_else() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-if-else") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(3 as i32, 1 as i32, &vm_context);
        assert_eq!(result, ());
    }).expect("Error while invoking");
}

// Line 376
#[test]
fn br_if_l376_assert_return_invoke_as_select_first() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-select-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 377
#[test]
fn br_if_l377_assert_return_invoke_as_select_first() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-select-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 378
#[test]
fn br_if_l378_assert_return_invoke_as_select_second() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-select-second") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 379
#[test]
fn br_if_l379_assert_return_invoke_as_select_second() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-select-second") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 380
#[test]
fn br_if_l380_assert_return_invoke_as_select_cond() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-select-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 382
#[test]
fn br_if_l382_assert_return_invoke_as_call_first() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-call-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 12 as i32);
    }).expect("Error while invoking");
}

// Line 383
#[test]
fn br_if_l383_assert_return_invoke_as_call_mid() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-call-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 13 as i32);
    }).expect("Error while invoking");
}

// Line 384
#[test]
fn br_if_l384_assert_return_invoke_as_call_last() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-call-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 14 as i32);
    }).expect("Error while invoking");
}

// Line 386
#[test]
fn br_if_l386_assert_return_invoke_as_call_indirect_func() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-call_indirect-func") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 4 as i32);
    }).expect("Error while invoking");
}

// Line 387
#[test]
fn br_if_l387_assert_return_invoke_as_call_indirect_first() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-call_indirect-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 4 as i32);
    }).expect("Error while invoking");
}

// Line 388
#[test]
fn br_if_l388_assert_return_invoke_as_call_indirect_mid() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-call_indirect-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 4 as i32);
    }).expect("Error while invoking");
}

// Line 389
#[test]
fn br_if_l389_assert_return_invoke_as_call_indirect_last() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-call_indirect-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 4 as i32);
    }).expect("Error while invoking");
}

// Line 391
#[test]
fn br_if_l391_assert_return_invoke_as_set_local_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-set_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 392
#[test]
fn br_if_l392_assert_return_invoke_as_set_local_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-set_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 17 as i32);
    }).expect("Error while invoking");
}

// Line 394
#[test]
fn br_if_l394_assert_return_invoke_as_unary_operand() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-unary-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> f64 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1.0 as f64);
    }).expect("Error while invoking");
}

// Line 395
#[test]
fn br_if_l395_assert_return_invoke_as_binary_left() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-binary-left") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 396
#[test]
fn br_if_l396_assert_return_invoke_as_binary_right() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-binary-right") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 397
#[test]
fn br_if_l397_assert_return_invoke_as_memory_grow_size() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("as-memory.grow-size") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(&vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 399
#[test]
fn br_if_l399_assert_return_invoke_nested_block_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-block-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 21 as i32);
    }).expect("Error while invoking");
}

// Line 400
#[test]
fn br_if_l400_assert_return_invoke_nested_block_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-block-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 9 as i32);
    }).expect("Error while invoking");
}

// Line 401
#[test]
fn br_if_l401_assert_return_invoke_nested_br_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 5 as i32);
    }).expect("Error while invoking");
}

// Line 402
#[test]
fn br_if_l402_assert_return_invoke_nested_br_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 9 as i32);
    }).expect("Error while invoking");
}

// Line 403
#[test]
fn br_if_l403_assert_return_invoke_nested_br_if_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br_if-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 5 as i32);
    }).expect("Error while invoking");
}

// Line 404
#[test]
fn br_if_l404_assert_return_invoke_nested_br_if_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br_if-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 9 as i32);
    }).expect("Error while invoking");
}

// Line 405
#[test]
fn br_if_l405_assert_return_invoke_nested_br_if_value_cond() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br_if-value-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 5 as i32);
    }).expect("Error while invoking");
}

// Line 406
#[test]
fn br_if_l406_assert_return_invoke_nested_br_if_value_cond() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br_if-value-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 9 as i32);
    }).expect("Error while invoking");
}

// Line 407
#[test]
fn br_if_l407_assert_return_invoke_nested_br_table_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br_table-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 5 as i32);
    }).expect("Error while invoking");
}

// Line 408
#[test]
fn br_if_l408_assert_return_invoke_nested_br_table_value() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br_table-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 9 as i32);
    }).expect("Error while invoking");
}

// Line 409
#[test]
fn br_if_l409_assert_return_invoke_nested_br_table_value_index() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br_table-value-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 5 as i32);
    }).expect("Error while invoking");
}

// Line 410
#[test]
fn br_if_l410_assert_return_invoke_nested_br_table_value_index() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("nested-br_table-value-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 9 as i32);
    }).expect("Error while invoking");
}

// Line 413

#[test]
fn br_if_l413_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 0, 13, 0, 104, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 417

#[test]
fn br_if_l417_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 0, 13, 0, 122, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 421

#[test]
fn br_if_l421_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 0, 13, 0, 140, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 425

#[test]
fn br_if_l425_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 0, 13, 0, 154, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 430

#[test]
fn br_if_l430_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 1, 13, 0, 104, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 434

#[test]
fn br_if_l434_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 66, 1, 13, 0, 122, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 438

#[test]
fn br_if_l438_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 15, 1, 13, 0, 2, 64, 67, 0, 0, 128, 63, 13, 0, 140, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 442

#[test]
fn br_if_l442_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 66, 1, 13, 0, 154, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 447

#[test]
fn br_if_l447_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 13, 1, 11, 0, 2, 127, 65, 0, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 453

#[test]
fn br_if_l453_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 13, 1, 11, 0, 2, 127, 65, 1, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 459

#[test]
fn br_if_l459_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 13, 1, 11, 0, 2, 64, 65, 0, 65, 0, 13, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 465

#[test]
fn br_if_l465_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 13, 1, 11, 0, 2, 64, 65, 0, 65, 1, 13, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 472

#[test]
fn br_if_l472_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 2, 127, 1, 65, 0, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 478

#[test]
fn br_if_l478_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 2, 127, 1, 65, 1, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 484

#[test]
fn br_if_l484_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 2, 127, 66, 1, 65, 0, 13, 0, 26, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 492

#[test]
fn br_if_l492_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 2, 127, 66, 1, 65, 0, 13, 0, 26, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 501

#[test]
fn br_if_l501_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 10, 1, 8, 0, 2, 64, 1, 13, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 507

#[test]
fn br_if_l507_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 11, 1, 9, 0, 2, 64, 66, 0, 13, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 513

#[test]
fn br_if_l513_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 2, 127, 65, 0, 1, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 519

#[test]
fn br_if_l519_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 2, 127, 65, 0, 2, 64, 65, 1, 13, 1, 11, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 525

#[test]
fn br_if_l525_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 15, 1, 13, 0, 2, 127, 65, 0, 66, 0, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 532

#[test]
fn br_if_l532_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 8, 1, 6, 0, 65, 1, 13, 1, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 536

#[test]
fn br_if_l536_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 14, 1, 12, 0, 2, 64, 2, 64, 65, 1, 13, 5, 11, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 540

#[test]
fn br_if_l540_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 65, 1, 13, 129, 128, 128, 128, 1, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

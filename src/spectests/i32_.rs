// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/i32_.wast
use std::panic;
use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, VmCtx, Export};
use wabt::wat2wasm;


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32 i32) (result i32)))
      (type (;1;) (func (param i32) (result i32)))
      (func (;0;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.add)
      (func (;1;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.sub)
      (func (;2;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.mul)
      (func (;3;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.div_s)
      (func (;4;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.div_u)
      (func (;5;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.rem_s)
      (func (;6;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.rem_u)
      (func (;7;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.and)
      (func (;8;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.or)
      (func (;9;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.xor)
      (func (;10;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.shl)
      (func (;11;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.shr_s)
      (func (;12;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.shr_u)
      (func (;13;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.rotl)
      (func (;14;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.rotr)
      (func (;15;) (type 1) (param i32) (result i32)
        get_local 0
        i32.clz)
      (func (;16;) (type 1) (param i32) (result i32)
        get_local 0
        i32.ctz)
      (func (;17;) (type 1) (param i32) (result i32)
        get_local 0
        i32.popcnt)
      (func (;18;) (type 1) (param i32) (result i32)
        get_local 0
        i32.eqz)
      (func (;19;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.eq)
      (func (;20;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.ne)
      (func (;21;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.lt_s)
      (func (;22;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.lt_u)
      (func (;23;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.le_s)
      (func (;24;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.le_u)
      (func (;25;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.gt_s)
      (func (;26;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.gt_u)
      (func (;27;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.ge_s)
      (func (;28;) (type 0) (param i32 i32) (result i32)
        get_local 0
        get_local 1
        i32.ge_u)
      (export \"add\" (func 0))
      (export \"sub\" (func 1))
      (export \"mul\" (func 2))
      (export \"div_s\" (func 3))
      (export \"div_u\" (func 4))
      (export \"rem_s\" (func 5))
      (export \"rem_u\" (func 6))
      (export \"and\" (func 7))
      (export \"or\" (func 8))
      (export \"xor\" (func 9))
      (export \"shl\" (func 10))
      (export \"shr_s\" (func 11))
      (export \"shr_u\" (func 12))
      (export \"rotl\" (func 13))
      (export \"rotr\" (func 14))
      (export \"clz\" (func 15))
      (export \"ctz\" (func 16))
      (export \"popcnt\" (func 17))
      (export \"eqz\" (func 18))
      (export \"eq\" (func 19))
      (export \"ne\" (func 20))
      (export \"lt_s\" (func 21))
      (export \"lt_u\" (func 22))
      (export \"le_s\" (func 23))
      (export \"le_u\" (func 24))
      (export \"gt_s\" (func 25))
      (export \"gt_u\" (func 26))
      (export \"ge_s\" (func 27))
      (export \"ge_u\" (func 28)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, ImportObject::new()).expect("WASM can't be instantiated")
}

// Line 35
#[test]
fn i32__l35_assert_return_invoke_add() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 36
#[test]
fn i32__l36_assert_return_invoke_add() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 37
#[test]
fn i32__l37_assert_return_invoke_add() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, -2 as i32);
    }).expect("Error while invoking");
}

// Line 38
#[test]
fn i32__l38_assert_return_invoke_add() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 39
#[test]
fn i32__l39_assert_return_invoke_add() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 1 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 40
#[test]
fn i32__l40_assert_return_invoke_add() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 2147483647 as i32);
    }).expect("Error while invoking");
}

// Line 41
#[test]
fn i32__l41_assert_return_invoke_add() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 42
#[test]
fn i32__l42_assert_return_invoke_add() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1073741823 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1073741824 as i32);
    }).expect("Error while invoking");
}

// Line 44
#[test]
fn i32__l44_assert_return_invoke_sub() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 45
#[test]
fn i32__l45_assert_return_invoke_sub() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 46
#[test]
fn i32__l46_assert_return_invoke_sub() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 47
#[test]
fn i32__l47_assert_return_invoke_sub() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -1 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 48
#[test]
fn i32__l48_assert_return_invoke_sub() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 2147483647 as i32);
    }).expect("Error while invoking");
}

// Line 49
#[test]
fn i32__l49_assert_return_invoke_sub() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 50
#[test]
fn i32__l50_assert_return_invoke_sub() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1073741823 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1073741824 as i32);
    }).expect("Error while invoking");
}

// Line 52
#[test]
fn i32__l52_assert_return_invoke_mul() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 53
#[test]
fn i32__l53_assert_return_invoke_mul() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 54
#[test]
fn i32__l54_assert_return_invoke_mul() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 55
#[test]
fn i32__l55_assert_return_invoke_mul() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(268435456 as i32, 4096 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 56
#[test]
fn i32__l56_assert_return_invoke_mul() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 57
#[test]
fn i32__l57_assert_return_invoke_mul() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 58
#[test]
fn i32__l58_assert_return_invoke_mul() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -1 as i32, &vm_context);
        assert_eq!(result, -2147483647 as i32);
    }).expect("Error while invoking");
}

// Line 59
#[test]
fn i32__l59_assert_return_invoke_mul() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(19088743 as i32, 1985229328 as i32, &vm_context);
        assert_eq!(result, 898528368 as i32);
    }).expect("Error while invoking");
}

// Line 60
#[test]
fn i32__l60_assert_return_invoke_mul() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 62

// Line 63

// Line 64

// Line 65
#[test]
fn i32__l65_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 66
#[test]
fn i32__l66_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 67
#[test]
fn i32__l67_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 68
#[test]
fn i32__l68_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 69
#[test]
fn i32__l69_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2 as i32, &vm_context);
        assert_eq!(result, -1073741824 as i32);
    }).expect("Error while invoking");
}

// Line 70
#[test]
fn i32__l70_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483647 as i32, 1000 as i32, &vm_context);
        assert_eq!(result, -2147483 as i32);
    }).expect("Error while invoking");
}

// Line 71
#[test]
fn i32__l71_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(5 as i32, 2 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 72
#[test]
fn i32__l72_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-5 as i32, 2 as i32, &vm_context);
        assert_eq!(result, -2 as i32);
    }).expect("Error while invoking");
}

// Line 73
#[test]
fn i32__l73_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(5 as i32, -2 as i32, &vm_context);
        assert_eq!(result, -2 as i32);
    }).expect("Error while invoking");
}

// Line 74
#[test]
fn i32__l74_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-5 as i32, -2 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 75
#[test]
fn i32__l75_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(7 as i32, 3 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 76
#[test]
fn i32__l76_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-7 as i32, 3 as i32, &vm_context);
        assert_eq!(result, -2 as i32);
    }).expect("Error while invoking");
}

// Line 77
#[test]
fn i32__l77_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(7 as i32, -3 as i32, &vm_context);
        assert_eq!(result, -2 as i32);
    }).expect("Error while invoking");
}

// Line 78
#[test]
fn i32__l78_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-7 as i32, -3 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 79
#[test]
fn i32__l79_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(11 as i32, 5 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 80
#[test]
fn i32__l80_assert_return_invoke_div_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(17 as i32, 7 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 82

// Line 83

// Line 84
#[test]
fn i32__l84_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 85
#[test]
fn i32__l85_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 86
#[test]
fn i32__l86_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 87
#[test]
fn i32__l87_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 88
#[test]
fn i32__l88_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2 as i32, &vm_context);
        assert_eq!(result, 1073741824 as i32);
    }).expect("Error while invoking");
}

// Line 89
#[test]
fn i32__l89_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1880092688 as i32, 65537 as i32, &vm_context);
        assert_eq!(result, 36847 as i32);
    }).expect("Error while invoking");
}

// Line 90
#[test]
fn i32__l90_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483647 as i32, 1000 as i32, &vm_context);
        assert_eq!(result, 2147483 as i32);
    }).expect("Error while invoking");
}

// Line 91
#[test]
fn i32__l91_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(5 as i32, 2 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 92
#[test]
fn i32__l92_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-5 as i32, 2 as i32, &vm_context);
        assert_eq!(result, 2147483645 as i32);
    }).expect("Error while invoking");
}

// Line 93
#[test]
fn i32__l93_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(5 as i32, -2 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 94
#[test]
fn i32__l94_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-5 as i32, -2 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 95
#[test]
fn i32__l95_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(7 as i32, 3 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 96
#[test]
fn i32__l96_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(11 as i32, 5 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 97
#[test]
fn i32__l97_assert_return_invoke_div_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(17 as i32, 7 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 99

// Line 100

// Line 101
#[test]
fn i32__l101_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 102
#[test]
fn i32__l102_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 103
#[test]
fn i32__l103_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 104
#[test]
fn i32__l104_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 105
#[test]
fn i32__l105_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 106
#[test]
fn i32__l106_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 107
#[test]
fn i32__l107_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 108
#[test]
fn i32__l108_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483647 as i32, 1000 as i32, &vm_context);
        assert_eq!(result, -647 as i32);
    }).expect("Error while invoking");
}

// Line 109
#[test]
fn i32__l109_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(5 as i32, 2 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 110
#[test]
fn i32__l110_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-5 as i32, 2 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 111
#[test]
fn i32__l111_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(5 as i32, -2 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 112
#[test]
fn i32__l112_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-5 as i32, -2 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 113
#[test]
fn i32__l113_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(7 as i32, 3 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 114
#[test]
fn i32__l114_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-7 as i32, 3 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 115
#[test]
fn i32__l115_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(7 as i32, -3 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 116
#[test]
fn i32__l116_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-7 as i32, -3 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 117
#[test]
fn i32__l117_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(11 as i32, 5 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 118
#[test]
fn i32__l118_assert_return_invoke_rem_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(17 as i32, 7 as i32, &vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 120

// Line 121

// Line 122
#[test]
fn i32__l122_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 123
#[test]
fn i32__l123_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 124
#[test]
fn i32__l124_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 125
#[test]
fn i32__l125_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 126
#[test]
fn i32__l126_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 127
#[test]
fn i32__l127_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1880092688 as i32, 65537 as i32, &vm_context);
        assert_eq!(result, 32769 as i32);
    }).expect("Error while invoking");
}

// Line 128
#[test]
fn i32__l128_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483647 as i32, 1000 as i32, &vm_context);
        assert_eq!(result, 649 as i32);
    }).expect("Error while invoking");
}

// Line 129
#[test]
fn i32__l129_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(5 as i32, 2 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 130
#[test]
fn i32__l130_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-5 as i32, 2 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 131
#[test]
fn i32__l131_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(5 as i32, -2 as i32, &vm_context);
        assert_eq!(result, 5 as i32);
    }).expect("Error while invoking");
}

// Line 132
#[test]
fn i32__l132_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-5 as i32, -2 as i32, &vm_context);
        assert_eq!(result, -5 as i32);
    }).expect("Error while invoking");
}

// Line 133
#[test]
fn i32__l133_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(7 as i32, 3 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 134
#[test]
fn i32__l134_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(11 as i32, 5 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 135
#[test]
fn i32__l135_assert_return_invoke_rem_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(17 as i32, 7 as i32, &vm_context);
        assert_eq!(result, 3 as i32);
    }).expect("Error while invoking");
}

// Line 137
#[test]
fn i32__l137_assert_return_invoke_and() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 138
#[test]
fn i32__l138_assert_return_invoke_and() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 139
#[test]
fn i32__l139_assert_return_invoke_and() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 140
#[test]
fn i32__l140_assert_return_invoke_and() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 141
#[test]
fn i32__l141_assert_return_invoke_and() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 142
#[test]
fn i32__l142_assert_return_invoke_and() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 2147483647 as i32);
    }).expect("Error while invoking");
}

// Line 143
#[test]
fn i32__l143_assert_return_invoke_and() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-252641281 as i32, -3856 as i32, &vm_context);
        assert_eq!(result, -252645136 as i32);
    }).expect("Error while invoking");
}

// Line 144
#[test]
fn i32__l144_assert_return_invoke_and() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 146
#[test]
fn i32__l146_assert_return_invoke_or() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 147
#[test]
fn i32__l147_assert_return_invoke_or() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 148
#[test]
fn i32__l148_assert_return_invoke_or() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 149
#[test]
fn i32__l149_assert_return_invoke_or() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 150
#[test]
fn i32__l150_assert_return_invoke_or() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 151
#[test]
fn i32__l151_assert_return_invoke_or() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 152
#[test]
fn i32__l152_assert_return_invoke_or() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-252641281 as i32, -3856 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 153
#[test]
fn i32__l153_assert_return_invoke_or() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 155
#[test]
fn i32__l155_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 156
#[test]
fn i32__l156_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 157
#[test]
fn i32__l157_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 158
#[test]
fn i32__l158_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 159
#[test]
fn i32__l159_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 160
#[test]
fn i32__l160_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 161
#[test]
fn i32__l161_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 2147483647 as i32);
    }).expect("Error while invoking");
}

// Line 162
#[test]
fn i32__l162_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 163
#[test]
fn i32__l163_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-252641281 as i32, -3856 as i32, &vm_context);
        assert_eq!(result, 252645135 as i32);
    }).expect("Error while invoking");
}

// Line 164
#[test]
fn i32__l164_assert_return_invoke_xor() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 166
#[test]
fn i32__l166_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 167
#[test]
fn i32__l167_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 168
#[test]
fn i32__l168_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 1 as i32, &vm_context);
        assert_eq!(result, -2 as i32);
    }).expect("Error while invoking");
}

// Line 169
#[test]
fn i32__l169_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, -2 as i32);
    }).expect("Error while invoking");
}

// Line 170
#[test]
fn i32__l170_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 171
#[test]
fn i32__l171_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1073741824 as i32, 1 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 172
#[test]
fn i32__l172_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 31 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 173
#[test]
fn i32__l173_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 174
#[test]
fn i32__l174_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 33 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 175
#[test]
fn i32__l175_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 176
#[test]
fn i32__l176_assert_return_invoke_shl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 178
#[test]
fn i32__l178_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 179
#[test]
fn i32__l179_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 180
#[test]
fn i32__l180_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 181
#[test]
fn i32__l181_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1073741823 as i32);
    }).expect("Error while invoking");
}

// Line 182
#[test]
fn i32__l182_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
        assert_eq!(result, -1073741824 as i32);
    }).expect("Error while invoking");
}

// Line 183
#[test]
fn i32__l183_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1073741824 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 536870912 as i32);
    }).expect("Error while invoking");
}

// Line 184
#[test]
fn i32__l184_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 185
#[test]
fn i32__l185_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 33 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 186
#[test]
fn i32__l186_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 187
#[test]
fn i32__l187_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 188
#[test]
fn i32__l188_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 189
#[test]
fn i32__l189_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 31 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 190
#[test]
fn i32__l190_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 32 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 191
#[test]
fn i32__l191_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 33 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 192
#[test]
fn i32__l192_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 193
#[test]
fn i32__l193_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 194
#[test]
fn i32__l194_assert_return_invoke_shr_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 196
#[test]
fn i32__l196_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 197
#[test]
fn i32__l197_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 198
#[test]
fn i32__l198_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 2147483647 as i32);
    }).expect("Error while invoking");
}

// Line 199
#[test]
fn i32__l199_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1073741823 as i32);
    }).expect("Error while invoking");
}

// Line 200
#[test]
fn i32__l200_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1073741824 as i32);
    }).expect("Error while invoking");
}

// Line 201
#[test]
fn i32__l201_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1073741824 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 536870912 as i32);
    }).expect("Error while invoking");
}

// Line 202
#[test]
fn i32__l202_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 203
#[test]
fn i32__l203_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 33 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 204
#[test]
fn i32__l204_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 205
#[test]
fn i32__l205_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 206
#[test]
fn i32__l206_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 207
#[test]
fn i32__l207_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 31 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 208
#[test]
fn i32__l208_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 32 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 209
#[test]
fn i32__l209_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 33 as i32, &vm_context);
        assert_eq!(result, 2147483647 as i32);
    }).expect("Error while invoking");
}

// Line 210
#[test]
fn i32__l210_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 211
#[test]
fn i32__l211_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 212
#[test]
fn i32__l212_assert_return_invoke_shr_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 214
#[test]
fn i32__l214_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 215
#[test]
fn i32__l215_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 216
#[test]
fn i32__l216_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 217
#[test]
fn i32__l217_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 218
#[test]
fn i32__l218_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1412589450 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1469788397 as i32);
    }).expect("Error while invoking");
}

// Line 219
#[test]
fn i32__l219_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-33498112 as i32, 4 as i32, &vm_context);
        assert_eq!(result, -535969777 as i32);
    }).expect("Error while invoking");
}

// Line 220
#[test]
fn i32__l220_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1329474845 as i32, 5 as i32, &vm_context);
        assert_eq!(result, 406477942 as i32);
    }).expect("Error while invoking");
}

// Line 221
#[test]
fn i32__l221_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(32768 as i32, 37 as i32, &vm_context);
        assert_eq!(result, 1048576 as i32);
    }).expect("Error while invoking");
}

// Line 222
#[test]
fn i32__l222_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1329474845 as i32, 65285 as i32, &vm_context);
        assert_eq!(result, 406477942 as i32);
    }).expect("Error while invoking");
}

// Line 223
#[test]
fn i32__l223_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1989852383 as i32, -19 as i32, &vm_context);
        assert_eq!(result, 1469837011 as i32);
    }).expect("Error while invoking");
}

// Line 224
#[test]
fn i32__l224_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1989852383 as i32, -2147483635 as i32, &vm_context);
        assert_eq!(result, 1469837011 as i32);
    }).expect("Error while invoking");
}

// Line 225
#[test]
fn i32__l225_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 31 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 226
#[test]
fn i32__l226_assert_return_invoke_rotl() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 228
#[test]
fn i32__l228_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, -2147483648 as i32);
    }).expect("Error while invoking");
}

// Line 229
#[test]
fn i32__l229_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 230
#[test]
fn i32__l230_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, -1 as i32);
    }).expect("Error while invoking");
}

// Line 231
#[test]
fn i32__l231_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 32 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 232
#[test]
fn i32__l232_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-16724992 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 2139121152 as i32);
    }).expect("Error while invoking");
}

// Line 233
#[test]
fn i32__l233_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(524288 as i32, 4 as i32, &vm_context);
        assert_eq!(result, 32768 as i32);
    }).expect("Error while invoking");
}

// Line 234
#[test]
fn i32__l234_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1329474845 as i32, 5 as i32, &vm_context);
        assert_eq!(result, 495324823 as i32);
    }).expect("Error while invoking");
}

// Line 235
#[test]
fn i32__l235_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(32768 as i32, 37 as i32, &vm_context);
        assert_eq!(result, 1024 as i32);
    }).expect("Error while invoking");
}

// Line 236
#[test]
fn i32__l236_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1329474845 as i32, 65285 as i32, &vm_context);
        assert_eq!(result, 495324823 as i32);
    }).expect("Error while invoking");
}

// Line 237
#[test]
fn i32__l237_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1989852383 as i32, -19 as i32, &vm_context);
        assert_eq!(result, -419711787 as i32);
    }).expect("Error while invoking");
}

// Line 238
#[test]
fn i32__l238_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1989852383 as i32, -2147483635 as i32, &vm_context);
        assert_eq!(result, -419711787 as i32);
    }).expect("Error while invoking");
}

// Line 239
#[test]
fn i32__l239_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 31 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 240
#[test]
fn i32__l240_assert_return_invoke_rotr() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 31 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 242
#[test]
fn i32__l242_assert_return_invoke_clz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 243
#[test]
fn i32__l243_assert_return_invoke_clz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 32 as i32);
    }).expect("Error while invoking");
}

// Line 244
#[test]
fn i32__l244_assert_return_invoke_clz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(32768 as i32, &vm_context);
        assert_eq!(result, 16 as i32);
    }).expect("Error while invoking");
}

// Line 245
#[test]
fn i32__l245_assert_return_invoke_clz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(255 as i32, &vm_context);
        assert_eq!(result, 24 as i32);
    }).expect("Error while invoking");
}

// Line 246
#[test]
fn i32__l246_assert_return_invoke_clz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 247
#[test]
fn i32__l247_assert_return_invoke_clz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 31 as i32);
    }).expect("Error while invoking");
}

// Line 248
#[test]
fn i32__l248_assert_return_invoke_clz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2 as i32, &vm_context);
        assert_eq!(result, 30 as i32);
    }).expect("Error while invoking");
}

// Line 249
#[test]
fn i32__l249_assert_return_invoke_clz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 251
#[test]
fn i32__l251_assert_return_invoke_ctz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 252
#[test]
fn i32__l252_assert_return_invoke_ctz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 32 as i32);
    }).expect("Error while invoking");
}

// Line 253
#[test]
fn i32__l253_assert_return_invoke_ctz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(32768 as i32, &vm_context);
        assert_eq!(result, 15 as i32);
    }).expect("Error while invoking");
}

// Line 254
#[test]
fn i32__l254_assert_return_invoke_ctz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(65536 as i32, &vm_context);
        assert_eq!(result, 16 as i32);
    }).expect("Error while invoking");
}

// Line 255
#[test]
fn i32__l255_assert_return_invoke_ctz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, &vm_context);
        assert_eq!(result, 31 as i32);
    }).expect("Error while invoking");
}

// Line 256
#[test]
fn i32__l256_assert_return_invoke_ctz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 258
#[test]
fn i32__l258_assert_return_invoke_popcnt() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, &vm_context);
        assert_eq!(result, 32 as i32);
    }).expect("Error while invoking");
}

// Line 259
#[test]
fn i32__l259_assert_return_invoke_popcnt() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 260
#[test]
fn i32__l260_assert_return_invoke_popcnt() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(32768 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 261
#[test]
fn i32__l261_assert_return_invoke_popcnt() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147450880 as i32, &vm_context);
        assert_eq!(result, 2 as i32);
    }).expect("Error while invoking");
}

// Line 262
#[test]
fn i32__l262_assert_return_invoke_popcnt() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, &vm_context);
        assert_eq!(result, 31 as i32);
    }).expect("Error while invoking");
}

// Line 263
#[test]
fn i32__l263_assert_return_invoke_popcnt() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1431655766 as i32, &vm_context);
        assert_eq!(result, 16 as i32);
    }).expect("Error while invoking");
}

// Line 264
#[test]
fn i32__l264_assert_return_invoke_popcnt() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1431655765 as i32, &vm_context);
        assert_eq!(result, 16 as i32);
    }).expect("Error while invoking");
}

// Line 265
#[test]
fn i32__l265_assert_return_invoke_popcnt() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-559038737 as i32, &vm_context);
        assert_eq!(result, 24 as i32);
    }).expect("Error while invoking");
}

// Line 267
#[test]
fn i32__l267_assert_return_invoke_eqz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 268
#[test]
fn i32__l268_assert_return_invoke_eqz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 269
#[test]
fn i32__l269_assert_return_invoke_eqz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 270
#[test]
fn i32__l270_assert_return_invoke_eqz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 271
#[test]
fn i32__l271_assert_return_invoke_eqz() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 273
#[test]
fn i32__l273_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 274
#[test]
fn i32__l274_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 275
#[test]
fn i32__l275_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 276
#[test]
fn i32__l276_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 277
#[test]
fn i32__l277_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 278
#[test]
fn i32__l278_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 279
#[test]
fn i32__l279_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 280
#[test]
fn i32__l280_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 281
#[test]
fn i32__l281_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 282
#[test]
fn i32__l282_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 283
#[test]
fn i32__l283_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 284
#[test]
fn i32__l284_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 285
#[test]
fn i32__l285_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 286
#[test]
fn i32__l286_assert_return_invoke_eq() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 288
#[test]
fn i32__l288_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 289
#[test]
fn i32__l289_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 290
#[test]
fn i32__l290_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 291
#[test]
fn i32__l291_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 292
#[test]
fn i32__l292_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 293
#[test]
fn i32__l293_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 294
#[test]
fn i32__l294_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 295
#[test]
fn i32__l295_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 296
#[test]
fn i32__l296_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 297
#[test]
fn i32__l297_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 298
#[test]
fn i32__l298_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 299
#[test]
fn i32__l299_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 300
#[test]
fn i32__l300_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 301
#[test]
fn i32__l301_assert_return_invoke_ne() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 303
#[test]
fn i32__l303_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 304
#[test]
fn i32__l304_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 305
#[test]
fn i32__l305_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 306
#[test]
fn i32__l306_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 307
#[test]
fn i32__l307_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 308
#[test]
fn i32__l308_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 309
#[test]
fn i32__l309_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 310
#[test]
fn i32__l310_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 311
#[test]
fn i32__l311_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 312
#[test]
fn i32__l312_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 313
#[test]
fn i32__l313_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 314
#[test]
fn i32__l314_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 315
#[test]
fn i32__l315_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 316
#[test]
fn i32__l316_assert_return_invoke_lt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 318
#[test]
fn i32__l318_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 319
#[test]
fn i32__l319_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 320
#[test]
fn i32__l320_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 321
#[test]
fn i32__l321_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 322
#[test]
fn i32__l322_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 323
#[test]
fn i32__l323_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 324
#[test]
fn i32__l324_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 325
#[test]
fn i32__l325_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 326
#[test]
fn i32__l326_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 327
#[test]
fn i32__l327_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 328
#[test]
fn i32__l328_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 329
#[test]
fn i32__l329_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 330
#[test]
fn i32__l330_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 331
#[test]
fn i32__l331_assert_return_invoke_lt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 333
#[test]
fn i32__l333_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 334
#[test]
fn i32__l334_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 335
#[test]
fn i32__l335_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 336
#[test]
fn i32__l336_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 337
#[test]
fn i32__l337_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 338
#[test]
fn i32__l338_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 339
#[test]
fn i32__l339_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 340
#[test]
fn i32__l340_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 341
#[test]
fn i32__l341_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 342
#[test]
fn i32__l342_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 343
#[test]
fn i32__l343_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 344
#[test]
fn i32__l344_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 345
#[test]
fn i32__l345_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 346
#[test]
fn i32__l346_assert_return_invoke_le_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 348
#[test]
fn i32__l348_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 349
#[test]
fn i32__l349_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 350
#[test]
fn i32__l350_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 351
#[test]
fn i32__l351_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 352
#[test]
fn i32__l352_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 353
#[test]
fn i32__l353_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 354
#[test]
fn i32__l354_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 355
#[test]
fn i32__l355_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 356
#[test]
fn i32__l356_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 357
#[test]
fn i32__l357_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 358
#[test]
fn i32__l358_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 359
#[test]
fn i32__l359_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 360
#[test]
fn i32__l360_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 361
#[test]
fn i32__l361_assert_return_invoke_le_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 363
#[test]
fn i32__l363_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 364
#[test]
fn i32__l364_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 365
#[test]
fn i32__l365_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 366
#[test]
fn i32__l366_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 367
#[test]
fn i32__l367_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 368
#[test]
fn i32__l368_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 369
#[test]
fn i32__l369_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 370
#[test]
fn i32__l370_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 371
#[test]
fn i32__l371_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 372
#[test]
fn i32__l372_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 373
#[test]
fn i32__l373_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 374
#[test]
fn i32__l374_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 375
#[test]
fn i32__l375_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 376
#[test]
fn i32__l376_assert_return_invoke_gt_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 378
#[test]
fn i32__l378_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 379
#[test]
fn i32__l379_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 380
#[test]
fn i32__l380_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 381
#[test]
fn i32__l381_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 382
#[test]
fn i32__l382_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 383
#[test]
fn i32__l383_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 384
#[test]
fn i32__l384_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 385
#[test]
fn i32__l385_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 386
#[test]
fn i32__l386_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 387
#[test]
fn i32__l387_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 388
#[test]
fn i32__l388_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 389
#[test]
fn i32__l389_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 390
#[test]
fn i32__l390_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 391
#[test]
fn i32__l391_assert_return_invoke_gt_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 393
#[test]
fn i32__l393_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 394
#[test]
fn i32__l394_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 395
#[test]
fn i32__l395_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 396
#[test]
fn i32__l396_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 397
#[test]
fn i32__l397_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 398
#[test]
fn i32__l398_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 399
#[test]
fn i32__l399_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 400
#[test]
fn i32__l400_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 401
#[test]
fn i32__l401_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 402
#[test]
fn i32__l402_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 403
#[test]
fn i32__l403_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 404
#[test]
fn i32__l404_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 405
#[test]
fn i32__l405_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 406
#[test]
fn i32__l406_assert_return_invoke_ge_s() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 408
#[test]
fn i32__l408_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 409
#[test]
fn i32__l409_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 410
#[test]
fn i32__l410_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 411
#[test]
fn i32__l411_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 412
#[test]
fn i32__l412_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 413
#[test]
fn i32__l413_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 414
#[test]
fn i32__l414_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(1 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 415
#[test]
fn i32__l415_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, 1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 416
#[test]
fn i32__l416_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 0 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 417
#[test]
fn i32__l417_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(0 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 418
#[test]
fn i32__l418_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, -1 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}

// Line 419
#[test]
fn i32__l419_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-1 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 420
#[test]
fn i32__l420_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(-2147483648 as i32, 2147483647 as i32, &vm_context);
        assert_eq!(result, 1 as i32);
    }).expect("Error while invoking");
}

// Line 421
#[test]
fn i32__l421_assert_return_invoke_ge_u() {
    let ResultObject { mut instance, module } = create_module_1();
    let func_index = match module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &VmCtx) -> i32 = get_instance_function!(instance, func_index);
    let vm_context = instance.generate_context();
    panic::catch_unwind(|| {
        let result = invoke_fn(2147483647 as i32, -2147483648 as i32, &vm_context);
        assert_eq!(result, 0 as i32);
    }).expect("Error while invoking");
}
